// USERS PERSPECTIVE
CALL ga.timetree.now({}) 
YIELD instant as today
MATCH (user:User {name:'Alpha'})-[:FOLLOWS]->(followed:User)-[:SHARED]->(share:Share)-[:AT_TIME]->(today)
WHERE user <> followed
WITH share
MATCH (share)<-[likes:LIKED]-(:User)
WITH DISTINCT(share) AS shares, COUNT(likes) AS nrLikes
RETURN shares
ORDER BY nrLikes DESC
SKIP 0
LIMIT 2


// TOPIC PERSPECTIVE
MATCH (user:User {name:'Alpha'})-[:INTERESTED_IN]->(:Tag)<-[:IS_TOPIC]-(share:Share)
WITH user, share
MATCH (share)<-[:SHARED]-(followed:User)<-[:FOLLOWS]-(user)
WHERE user <> followed
RETURN DISTINCT(share)
ORDER BY ID(share) DESC
SKIP 0
LIMIT 3

MATCH (user:User {name:'Alpha'})-[:INTERESTED_IN]->(:Tag)<-[:IS_TOPIC]-(share:Share)
WITH user, share
OPTIONAL MATCH (share)<-[SHARED]-(followed:User)<-[follows:FOLLOWS]-(user)
WHERE user <> followed
WITH share, follows
WHERE follows IS NULL 
RETURN DISTINCT(share)
ORDER BY ID(share) DESC
SKIP 0
LIMIT 3

CALL ga.timetree.now({}) 
YIELD instant as today
MATCH (user:User {name:'Alpha'})-[:INTERESTED_IN]->(:Tag)<-[:IS_TOPIC]-(share:Share)-[:AT_TIME]->(today)
WITH share
MATCH (share)<-[likes:LIKED]-(:User)
WITH DISTINCT(share) AS shares, COUNT(likes) AS nrLikes
RETURN shares
ORDER BY nrLikes DESC
SKIP 0
LIMIT 2

// SPACE TIME SEARCH
MATCH (share:Share)-[availableAt:AVAILABLE_AT]->(shareLoc:Location), (share)-[:AVAILABLE_DURING]->(sharedTime:Interval)
WITH share, point({ longitude: 5.1859604, latitude: 52.037247 }) AS here, point({ longitude: shareLoc.longitude, latitude: shareLoc.latitude }) AS there
WHERE toInteger(distance(here, there)/1000) < availableAt.radius
AND (sharedTime.from IS NULL OR timestamp() > sharedTime.from) AND (sharedTime.until IS NULL OR timestamp() < sharedTime.until)
RETURN share
ORDER BY ID(share) DESC

// OTHERS
All the users that have shared a certain topic, count order by nr or times
On all the topics that a certain user has shared, count order by nr or times


// USEFULL
CALL dbms.procedures() YIELD name, signature
WHERE name='dbms.listConfig'
RETURN signature
